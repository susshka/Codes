// ' - запрет вычисления, аналог (QUOTE (arg1 ard2 ...))

(setq имя_переменной значение) //вычисляет только второй арг
//имя не вычисляется в отличии от set

(cons 'a 'b) //вычисляет оба арг
// cons составляет точечную пару из двух аргументов (a . b) 
// может вывести список если записать ('a '(b))
// так происходит потому что cons составляет список, если второй арг
// тоже является списком
// он делает первый аргумент головой, а второй аргумент хвостом списка

(list arg1 arg2 ...) //вычисляет свои арг
//составляет список из своих аргументов и если аргументы - переменные, подставляет значения переменных на их место

(car '(arg1 arg2 ...))// вычисляет свои арг
// отделяет голову списка или А-компоненту точечной пары

(cdr '(arg1 arg2 ...))// вычисляет свои арг
// отделяет хвост списка или D-компоненту точечной пары

(atom 1) //вычисляет аргументы, проверяет "атомность"

(eq 'a 'b) //вычисляет аргументы, сравнивает АТОМЫ, если будет не
//атом, то вернет nil как и в случае несовпадения, иначе - Т
//(= a b) по факту то же самое
// neq - наоборот если атомы совпадают - nil

(Null/not arg) //вычисляет аргументы
//проверяет, имеет ли arg значение nil, тогда возвращает
//Т, иначе -nil

(COND (Условие1 Результат1) (Условие2 Результат2) ... (Условие_n Результат_n)) //не вычисляет аргументы
//условие и результат могут быть любыми s-выражениями
//1. Вычисляется значение выражения Условие1;
//2. Если это значение есть атом T, то вычисляется значение
//выражения Результат1 и это значение возвращается в качестве
//результата функции COND;
//2.1 Если это значение НЕ есть атом T, то вычисляется значение
//выражения Условие2;
//3. Если это значение есть атом T, то вычисляется значение
//выражения Результат2 и это значение возвращается в качестве
//результата функции COND;
//Процесс повторяется до тех пор, пока список аргументов будет
//исчерпан, либо пока значение одного из условий не окажется T;
//Если не одно из условий не дает в результате вычисления атом T, 
//то функция COND вернет атом Nil;
//то же самое что и 
//IF Условие1 Then Результат1 ELSEIF Условие2 Результат2 ... ELSEIF Условие_n Результат_n END IF 
//перед завершающим END IF может стоять конструкция ELSE Результат, которая получит управление, если все условия оказались ложными. Для этих целей в функции COND обычно в качестве последнего условия ставят атом T. В этом случае последнее условие оказывается гарантированно выполненым.
//(cond ((atom z1) "z1 - атом") (T "z1 - не атом")) - пример

(trace имя_функции)//не вычисляет арг
//Трассировка заключается в том, что при входе в трассируемую
//функцию печатаются значения входных параметров, а при выходе -
//результат вычисления. 
//UNTRACE -выключение трассировки













